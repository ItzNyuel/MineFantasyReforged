import org.apache.tools.ant.filters.ReplaceTokens

buildscript {
    repositories {
        maven { url = 'https://maven.minecraftforge.net' } // old url was 'https://files.minecraftforge.net/maven' 
        jcenter()
        mavenCentral()
        maven { url = "https://ajoberstar.org/bintray-backup/" }
        maven {
            name = 'FancyGradle'
            url = 'https://gitlab.com/api/v4/projects/26758973/packages/maven'
        }
        maven { url = "https://repo.spongepowered.org/repository/maven-public/" }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:5.+'
        classpath 'org.ajoberstar.grgit:grgit-gradle:3.1.1'
        classpath group: 'wtf.gofancy.fancygradle', name: 'wtf.gofancy.fancygradle.gradle.plugin', version: '1.1.1-6'
        classpath "org.spongepowered:mixingradle:0.7-SNAPSHOT"
    }

    repositories.each {
        if (it instanceof MavenArtifactRepository && it.url.toString() == "https://files.minecraftforge.net/maven") {
            it.url = "https://maven.minecraftforge.net"
        }
    }
}

apply plugin: 'net.minecraftforge.gradle'
// Only edit below this line, the above code adds and enables the necessary things for Forge to be setup.
apply plugin: 'idea'
apply plugin: 'maven-publish'
apply plugin: org.ajoberstar.grgit.gradle.GrgitPlugin
apply plugin: 'wtf.gofancy.fancygradle'
apply plugin: "org.spongepowered.mixin"

//// Project Settings ////
// http://maven.apache.org/guides/mini/guide-naming-conventions.html

group = "${project.mod_group}" // groupId
archivesBaseName = "${project.mod_id}" // artifactId - modid
version = "${project.mc_version}-" + project.major + "." + project.minor + "." + getPatchNumber() + getStable()

//// Project Settings ////

sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = '1.8' // Need this here so eclipse task generates correctly.

minecraft {
    // The mappings can be changed at any time, and must be in the following format.
    // snapshot_YYYYMMDD   Snapshot are built nightly.
    // stable_#            Stables are built at the discretion of the MCP team.
    // Use non-default mappings at your own risk. they may not always work.
    // Simply re-run your setup task after changing the mappings to update your workspace.
    //mappings channel: 'snapshot', version: '20171003-1.12'
    mappings channel: project.mappings_channel, version: "${project.mappings_version}-${project.mappings_mc_version}"
    // makeObfSourceJar = false // an Srg named sources jar is made by default. uncomment this to disable.

    accessTransformer = file('src/main/resources/META-INF/minefantasyreforged_at.cfg')

    // Default run configurations.
    // These can be tweaked, removed, or duplicated as needed.
    runs {
        client {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'info'

            lazyToken("minecraft_classpath") {
                configurations.library.copyRecursive().resolve().collect { it.absolutePath }.join(File.pathSeparator)
            }

            property 'fml.coreMods.load', mod_core_plugin.replace('${mod_group}', mod_group).replace('${mod_id}', mod_id)
        }

        server {

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'info'

            lazyToken("minecraft_classpath") {
                configurations.library.copyRecursive().resolve().collect { it.absolutePath }.join(File.pathSeparator)
            }

            property 'fml.coreMods.load', mod_core_plugin.replace('${mod_group}', mod_group).replace('${mod_id}', mod_id)
        }
    }
}

configurations {
    library
    implementation.extendsFrom library
}

repositories {
    maven {
        name 'Curseforge Maven'
        url 'https://minecraft.curseforge.com/api/maven/'
    }
    maven {
        url 'https://maven.blamejared.com'
    }
    maven {
        url "https://www.cursemaven.com"
    }
    maven {
        url = "https://chickenbones.net/maven"
    }
    maven {
        // location of the maven that hosts JEI files
        name = "Progwml6 maven"
        url = "http://dvs1.progwml6.com/files/maven"
        allowInsecureProtocol = true
    }
    maven {
        url = "https://repo.spongepowered.org/repository/maven-public/"
    }
    flatDir {
        // location for sources
        dirs 'libs'
    }
}

dependencies {
    //// MC version ////
    // Specify the version of Minecraft to use, If this is any group other then 'net.minecraft' it is assumed
    // that the dep is a ForgeGradle 'patcher' dependency. And it's patches will be applied.
    // The userdev artifact is a special name and will get all sorts of transformations applied to it.
    minecraft "net.minecraftforge:forge:${project.mc_version}-${project.forge_version}"
    //// MC version ////    


    // CurseForge Maven
    // Currently unused
    // CurseForge Maven usage: https://support.curseforge.com/en/support/solutions/articles/9000197321-curseforge-api
    // Format: compile '{projectSlug}:{mavenArtifact}:{mavenVersion}:{projectFileNameTag}'

    // CurseMaven - https://www.cursemaven.com/
    // Format: curse.maven:<descriptor>-<projectid>:<fileid>
    // Fields:
    // curse.maven -> Required. Marks the dependency to be resolved by the curse maven website.
    // <descriptor> -> Can be anything you want. This file downloaded will have this in it's name, so it's good to use this to show which files are what. A good practice would be to have this as the project slug.
    // <projectid> -> The project id of the file you want to add as a dependency.
    // <fileid> -> The file id of the file you want to add as a dependency.
    // Test link: https://www.cursemaven.com/test/<projectid>/<fileid>/<Classifier?>

    //// Dependencies ////

    //runtime "curse.maven:jei-${jei_projectid}:${jei_fileid}"
    implementation fg.deobf("mezz.jei:jei_${mc_version}:${jei_version}")
    implementation fg.deobf("codechicken:CodeChickenLib:${mc_version}-${ccl_version}:universal")

    library "org.spongepowered:mixin:0.8.5"
    library "com.google.guava:guava:21.0"
    //annotationProcessor 'org.spongepowered:mixin:0.8.5:processor'
    //// Dependencies ////

    //// Forge examples ////
    // You may put jars on which you depend on in ./libs or you may define them like so..
    // compile "some.group:artifact:version:classifier"
    // compile "some.group:artifact:version"

    // Real examples
    // compile 'com.mod-buildcraft:buildcraft:6.0.8:dev'  // adds buildcraft to the dev env
    // compile 'com.googlecode.efficient-java-matrix-library:ejml:0.24' // adds ejml to the dev env

    // The 'provided' configuration is for optional dependencies that exist at compile-time but might not at runtime.
    // provided 'com.mod-buildcraft:buildcraft:6.0.8:dev'

    // These dependencies get remapped to your current MCP mappings
    // deobf 'com.mod-buildcraft:buildcraft:6.0.8:dev'

    // For more info...
    // http://www.gradle.org/docs/current/userguide/artifact_dependencies_tutorial.html
    // http://www.gradle.org/docs/current/userguide/dependency_management.html
    //// Forge examples ////

}

//// Project manifest data ////

// Example for how to get properties into the manifest for reading by the runtime..
jar {
    manifest {
        attributes([
                "Maven-Artifact": "${project.mod_group}:${project.archivesBaseName}:${project.version}",
                "Specification-Title": archivesBaseName,
                "Specification-Vendor": "ThatPolishKid99",
                "Specification-Version": "1", // We are version 1 of ourselves
                "Implementation-Title": project.name,
                "Implementation-Version": "${version}",
                "Implementation-Vendor" :"ThatPolishKid99",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                "Built-On-Java": "${System.getProperty('java.vm.version')} (${System.getProperty('java.vm.vendor')})",
                "Built-On": "${project.mc_version}-${project.forge_version}",
                "FMLCorePlugin": mod_core_plugin.replace('${mod_group}', mod_group).replace('${mod_id}', mod_id),
                "FMLCorePluginContainsFMLMod": "false",
                "ForceLoadAsMod": "true",
                "TweakClass": "org.spongepowered.asm.launch.MixinTweaker",
                "TweakOrder": "0",
                "MixinConfigs": mod_mixin_configs.replace('${mod_id}', mod_id)
        ])
    }
}

task sourceJar(type: Jar, dependsOn: classes) {
    description = 'Creates a JAR containing the source code.'
    classifier = 'sources'
    from sourceSets.main.allSource
    manifest {
        attributes([
                "Maven-Artifact": "${project.mod_group}:${project.archivesBaseName}:${project.version}",
                "Specification-Title": archivesBaseName,
                "Specification-Vendor": "ThatPolishKid99",
                "Specification-Version": "1",
                "Implementation-Title": archivesBaseName + '-sources',
                "Implementation-Version": "${project.mc_version}-" + project.major + "." + project.minor + "." + getPatchNumber() + getStable(),
                "Implementation-Vendor": "ThatPolishKid99",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                "Built-On-Java": "${System.getProperty('java.vm.version')} (${System.getProperty('java.vm.vendor')})",
                "Built-On": "${project.mc_version}-${project.forge_version}",
                "FMLCorePlugin": mod_core_plugin.replace('${mod_group}', mod_group).replace('${mod_id}', mod_id),
                "FMLCorePluginContainsFMLMod": "false",
                "ForceLoadAsMod": "true",
                "TweakClass": "org.spongepowered.asm.launch.MixinTweaker",
                "TweakOrder": "0",
                "MixinConfigs": mod_mixin_configs.replace('${mod_id}', mod_id)
        ])
    }
}

mixin {
    add sourceSets.main, "refmap.minefantasyreforged.json"
    config "mixins.minefantasyreforged.json"
}

def getPatchNumber() {
    if (System.getenv("BUILD_NUMBER") != null) {
        return System.getenv("BUILD_NUMBER").toString()
    }
    return project.minor
}

def getStable() {
    if (isUnstable()) {
        return "-BETA"
    }
    return ""
}

def isUnstable() {
    return true;
}
//// Project manifest data ////

// Example configuration to allow publishing using the maven-publish task
// This is the preferred method to reobfuscate your jar file
jar.finalizedBy('reobfJar')
// However if you are in a multi-project build, dev time needs unobfed jar files, so you can delay the obfuscation until publishing by doing
// publish.dependsOn('reobfJar')

// replace @TOKENS@ in main file
task replaceTokens(type: Sync) {
    println 'replaceTokens'
    from sourceSets.main.java
    inputs.property 'version', project.mc_version.toString()
    filter(ReplaceTokens, tokens: [VERSION: version.toString()])
    filter(ReplaceTokens, tokens: [MCVERSION: "${project.mc_version}".toString()])
    into "$buildDir/src"
}

compileJava {
    source = replaceTokens.outputs
}

fancyGradle {
    patches {
        resources
        codeChickenLib
        coremods
        asm
    }
}

afterEvaluate {
    configurations.compileClasspath.resolvedConfiguration.firstLevelModuleDependencies.each { dep ->
        dependencies.annotationProcessor([group: dep.moduleGroup, name: dep.moduleName, version: dep.moduleVersion])
    }
}